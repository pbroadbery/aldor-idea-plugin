plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.13' apply false
    id "de.undercouch.download" version "3.2.0"
    id "org.jetbrains.grammarkit" version "2019.3"
}

group 'pab.aldor'
version '1.1-SNAPSHOT'


tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(Test) { systemProperties['aldor.build.skip_ci'] = System.getProperty('aldor.build.skip_ci') }

def libFiles = ["aldor", "algebra", "foam", "foamj", "SpadType"]
def libSource = "/home/pab/IdeaProjects/type-library/aldor-types/types/index/jars"
def libLocation = new File(libSource).exists() ? libSource : "extjars"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url 'https://dl.bintray.com/jetbrains/intellij-plugin-service'
    }
}

allprojects {
  apply plugin: 'java'
  tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

  sourceSets {
    main {
      java.srcDirs 'src/main/java', 'gen'
      resources.srcDirs 'resources'
    }
    test {
      java.srcDir 'src/test/java'
    }
  }

  apply plugin: 'org.jetbrains.intellij'
  intellij {
    version "IC-192.6817.14"
    plugins = ['java']
    downloadSources Boolean.valueOf(true)
  }
  
}

grammarKit {
    // version of IntelliJ patched JFlex (see bintray link below), Default is 1.7.0-1 
    jflexRelease = '1.7.0-1'

}

dependencies {
    compile project('jps-plugin')
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile files(libFiles.collect({"lib/${it}.jar"}))
}

patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}

task downloadGrammarKit(type: Download) {
    src 'https://github.com/JetBrains/Grammar-Kit/releases/download/2019.1/grammar-kit-2019.1.zip'
    dest 'download/GrammarKit.zip'
    overwrite false
    outputs.file file(dest)
}

task downloadJFlexSkel(type: Download) {
    src 'https://raw.githubusercontent.com/JetBrains/intellij-community/master/tools/lexer/idea-flex.skeleton'
    dest 'lib/jflex/idea-flex.skeleton'
    overwrite false
    outputs.file 'lib/jflex/idea-flex.skeleton'
}

task downloadJFlex(type: Download) {
    src 'https://bintray.com/jetbrains/intellij-third-party-dependencies/download_file?file_path=org%2Fjetbrains%2Fintellij%2Fdeps%2Fjflex%2Fjflex%2F1.7.0%2Fjflex-1.7.0.jar'
    dest 'lib/jflex/jflex-1.7.0-SNAPSHOT.jar'
    overwrite false
}

task cleanLexer {
    doLast {
	for (f in generateLexer.outputs.files) { delete f }
    }
}

task cleanLibs {
    doLast {
        for (f in libFiles) { delete "lib/${f}.jar"}
    }
}

tasks.clean.dependsOn tasks.cleanLexer
tasks.clean.dependsOn tasks.cleanLibs

task unzipGrammar(type: Copy) {
    def zipFile = file('download/GrammarKit.zip')
    def outputDir = 'lib'

    from zipTree(zipFile)
    into outputDir

    inputs.files tasks.downloadGrammarKit.outputs.files
    outputs.file file('lib/GrammarKit/lib/grammar-kit-2019.1.jar')
}

task generateLexer (type: JavaExec) {
    def dstRoot = "$project.projectDir/src/gen/jflex"
    def pkg = 'aldor/lexer'
    def src = "$project.projectDir/src/main/jflex/${pkg}/aldor.flex"
    def dst = "src/gen/jflex/" + pkg

	doFirst {
            delete file(dst)
        }

        main = 'jflex.Main'
        classpath = files('lib/jflex/jflex-1.7.0-SNAPSHOT.jar')

        args = ['--skel', 'lib/jflex/idea-flex.skeleton', '-d', "${dstRoot}/${pkg}" , file(src)]

        inputs.files files(['lib/jflex/jflex-1.7.0-SNAPSHOT.jar', 'lib/jflex/idea-flex.skeleton', src])
        outputs.files fileTree("${dst}").include('**/*.java')
}

task copyLibraryFiles(type: Copy) {
    println("Location is " + libLocation)
    from libFiles.collect({"${libLocation}/${it}.jar"})
    into 'lib'
}

task updateExternalJars(type: Copy) {
    from libFiles.collect({"${libLocation}/${it}.jar"})
    into 'extjars'
    eachFile {
        if (it.relativePath.getFile(destinationDir).exists()) {
            it.exclude()
        }
    }
}

task list(dependsOn: configurations.compile) {
    doLast {
        println "classpath = ${configurations.compile.collect { File file -> file.toString()}}"
    }
}

tasks.generateLexer.dependsOn tasks.downloadJFlex
tasks.generateLexer.dependsOn tasks.downloadJFlexSkel

parserTask(project, "Aldor", "aldor/psi")
parserTask(project, "Expression", "aldor/expression")

//tasks.compileJava.dependsOn tasks.generateAldorParser
//tasks.compileJava.dependsOn tasks.generateExpressionParser
tasks.compileJava.dependsOn tasks.generateLexer
tasks.compileJava.dependsOn tasks.copyLibraryFiles
tasks.compileJava.dependsOn tasks.updateExternalJars

def parserTask(project, parserName, pkg) {
    def tt = tasks.create("generate${parserName}Parser", JavaExec) {
        def dstRoot = "$project.projectDir/src/gen/grammar"
        def src = "$project.projectDir/src/main/grammar/${parserName}.bnf"
	    def dst = "$dstRoot/$pkg"
        classpath(configurations.compile + files('lib/grammar-kit/lib/grammar-kit-2019.1.jar'))
	//classpath = configurations["grammar-kit"]
        args = [dstRoot, file(src)]
        main = 'org.intellij.grammar.Main'
        inputs.file src
        outputs.dirs fileTree(dst).include('**/*.java')
    }
    def cleaner = tasks.create("clean${parserName}Parser") {
        outputs.upToDateWhen { false }
        doLast {
            for (f in tt.outputs.getFiles()) { delete f }
	}
    }
    tt.dependsOn tasks.unzipGrammar
    tasks.clean.dependsOn cleaner
    return tt
}

test {
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
}
